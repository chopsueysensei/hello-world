
:: ONE LANGUAGE TO RULE THEM ALL ::

- Use the := declaration / assigment syntax from JAI, originally proposed by Sean Barrett.

- Reflection must be very natural like in C#, not conflated with meta language features like in JAI. I must be able to query info about types by just writing type.attribute (i.e: int.size, uservar.type, etc.).

- We do want a Context so that we don't have to drag commonly used stuff across a ton of functions. However we don't want something dynamic and implicit and "hidden" like in JAI, but something more functional-like, and completely explicit and statically checked, and which can be examined at any time in a debugger. I propose a separate arguments section on every function, with a type and a name for each arg, but where the name is _both_ the name that will be used inside the function body and also the name that will be "captured" from the calling scope, similar to lambdas in C++. Very differently from lambdas though, you just specify this in the function declaration, not everytime you call it. The caller _can_ write the Context arguments explicitly if he desires to do so though.

- What Jon Blow does where he's developing an actual "big" program (game) to soundly inform many decisions about the language is very very good, however I think it'd be more convenient to have several different "small to medium" programs instead of one. These should be programs solving disparate problems relevant in the respective domain(s) the language wants to address, and could even merge at some point if that makes sense. This would allow several things:
  - Have a broader picture of what the final application of the language among different technical areas will look like.
  - Provide an easy way to determine what needs to be moved over to the core libraries, as several of those programs will begin to show what pieces of functionality are needed over an over across areas.
  - Provide many pieces of real working code that can be easily converted into automated tests that can be added to a testsuite to continuously run during the whole language development and beyond.

